// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockStorage) CreateCard(ctx context.Context, u *User, c *BankCard) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, u, c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockStorageMockRecorder) CreateCard(ctx, u, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockStorage)(nil).CreateCard), ctx, u, c)
}

// CreateData mocks base method.
func (m *MockStorage) CreateData(ctx context.Context, u *User, r *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, u, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockStorageMockRecorder) CreateData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockStorage)(nil).CreateData), ctx, u, r)
}

// CreateSecret mocks base method.
func (m *MockStorage) CreateSecret(ctx context.Context, u *User, s *Secret) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, u, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockStorageMockRecorder) CreateSecret(ctx, u, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockStorage)(nil).CreateSecret), ctx, u, s)
}

// DeleteCard mocks base method.
func (m *MockStorage) DeleteCard(ctx context.Context, u *User, cardNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, u, cardNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockStorageMockRecorder) DeleteCard(ctx, u, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockStorage)(nil).DeleteCard), ctx, u, cardNumber)
}

// DeleteData mocks base method.
func (m *MockStorage) DeleteData(ctx context.Context, u *User, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, u, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockStorageMockRecorder) DeleteData(ctx, u, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockStorage)(nil).DeleteData), ctx, u, name)
}

// DeleteSecret mocks base method.
func (m *MockStorage) DeleteSecret(ctx context.Context, u *User, secretKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, u, secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockStorageMockRecorder) DeleteSecret(ctx, u, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockStorage)(nil).DeleteSecret), ctx, u, secretKey)
}

// GetActive mocks base method.
func (m *MockStorage) GetActive(ctx context.Context) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive", ctx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActive indicates an expected call of GetActive.
func (mr *MockStorageMockRecorder) GetActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockStorage)(nil).GetActive), ctx)
}

// GetSecret mocks base method.
func (m *MockStorage) GetSecret(ctx context.Context, u *User, secretKey string) (*Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, u, secretKey)
	ret0, _ := ret[0].(*Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStorageMockRecorder) GetSecret(ctx, u, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStorage)(nil).GetSecret), ctx, u, secretKey)
}

// ListCard mocks base method.
func (m *MockStorage) ListCard(ctx context.Context, u *User) ([]*BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCard", ctx, u)
	ret0, _ := ret[0].([]*BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCard indicates an expected call of ListCard.
func (mr *MockStorageMockRecorder) ListCard(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCard", reflect.TypeOf((*MockStorage)(nil).ListCard), ctx, u)
}

// ListData mocks base method.
func (m *MockStorage) ListData(ctx context.Context, u *User) ([]*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", ctx, u)
	ret0, _ := ret[0].([]*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockStorageMockRecorder) ListData(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockStorage)(nil).ListData), ctx, u)
}

// LoadData mocks base method.
func (m *MockStorage) LoadData(ctx context.Context, u *User, name string) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", ctx, u, name)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadData indicates an expected call of LoadData.
func (mr *MockStorageMockRecorder) LoadData(ctx, u, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockStorage)(nil).LoadData), ctx, u, name)
}

// Register mocks base method.
func (m *MockStorage) Register(ctx context.Context, login, password, token, cryptokey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password, token, cryptokey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockStorageMockRecorder) Register(ctx, login, password, token, cryptokey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockStorage)(nil).Register), ctx, login, password, token, cryptokey)
}

// Stop mocks base method.
func (m *MockStorage) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockStorageMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStorage)(nil).Stop))
}

// UpdateData mocks base method.
func (m *MockStorage) UpdateData(ctx context.Context, u *User, r *Record) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, u, r)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockStorageMockRecorder) UpdateData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockStorage)(nil).UpdateData), ctx, u, r)
}

// MockDataStorage is a mock of DataStorage interface.
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage.
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance.
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockDataStorage) CreateData(ctx context.Context, u *User, r *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, u, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockDataStorageMockRecorder) CreateData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockDataStorage)(nil).CreateData), ctx, u, r)
}

// DeleteData mocks base method.
func (m *MockDataStorage) DeleteData(ctx context.Context, u *User, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, u, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockDataStorageMockRecorder) DeleteData(ctx, u, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockDataStorage)(nil).DeleteData), ctx, u, name)
}

// ListData mocks base method.
func (m *MockDataStorage) ListData(ctx context.Context, u *User) ([]*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", ctx, u)
	ret0, _ := ret[0].([]*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockDataStorageMockRecorder) ListData(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockDataStorage)(nil).ListData), ctx, u)
}

// LoadData mocks base method.
func (m *MockDataStorage) LoadData(ctx context.Context, u *User, name string) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", ctx, u, name)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadData indicates an expected call of LoadData.
func (mr *MockDataStorageMockRecorder) LoadData(ctx, u, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockDataStorage)(nil).LoadData), ctx, u, name)
}

// UpdateData mocks base method.
func (m *MockDataStorage) UpdateData(ctx context.Context, u *User, r *Record) (uint64, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, u, r)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataStorageMockRecorder) UpdateData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDataStorage)(nil).UpdateData), ctx, u, r)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetActive mocks base method.
func (m *MockUserStorage) GetActive(ctx context.Context) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive", ctx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActive indicates an expected call of GetActive.
func (mr *MockUserStorageMockRecorder) GetActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockUserStorage)(nil).GetActive), ctx)
}

// Register mocks base method.
func (m *MockUserStorage) Register(ctx context.Context, login, password, token, cryptokey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, password, token, cryptokey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserStorageMockRecorder) Register(ctx, login, password, token, cryptokey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserStorage)(nil).Register), ctx, login, password, token, cryptokey)
}

// MockWalletStorage is a mock of WalletStorage interface.
type MockWalletStorage struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStorageMockRecorder
}

// MockWalletStorageMockRecorder is the mock recorder for MockWalletStorage.
type MockWalletStorageMockRecorder struct {
	mock *MockWalletStorage
}

// NewMockWalletStorage creates a new mock instance.
func NewMockWalletStorage(ctrl *gomock.Controller) *MockWalletStorage {
	mock := &MockWalletStorage{ctrl: ctrl}
	mock.recorder = &MockWalletStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStorage) EXPECT() *MockWalletStorageMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockWalletStorage) CreateCard(ctx context.Context, u *User, c *BankCard) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", ctx, u, c)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockWalletStorageMockRecorder) CreateCard(ctx, u, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockWalletStorage)(nil).CreateCard), ctx, u, c)
}

// DeleteCard mocks base method.
func (m *MockWalletStorage) DeleteCard(ctx context.Context, u *User, cardNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", ctx, u, cardNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard.
func (mr *MockWalletStorageMockRecorder) DeleteCard(ctx, u, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockWalletStorage)(nil).DeleteCard), ctx, u, cardNumber)
}

// ListCard mocks base method.
func (m *MockWalletStorage) ListCard(ctx context.Context, u *User) ([]*BankCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCard", ctx, u)
	ret0, _ := ret[0].([]*BankCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCard indicates an expected call of ListCard.
func (mr *MockWalletStorageMockRecorder) ListCard(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCard", reflect.TypeOf((*MockWalletStorage)(nil).ListCard), ctx, u)
}

// MockSecretStorage is a mock of SecretStorage interface.
type MockSecretStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSecretStorageMockRecorder
}

// MockSecretStorageMockRecorder is the mock recorder for MockSecretStorage.
type MockSecretStorageMockRecorder struct {
	mock *MockSecretStorage
}

// NewMockSecretStorage creates a new mock instance.
func NewMockSecretStorage(ctrl *gomock.Controller) *MockSecretStorage {
	mock := &MockSecretStorage{ctrl: ctrl}
	mock.recorder = &MockSecretStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretStorage) EXPECT() *MockSecretStorageMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretStorage) CreateSecret(ctx context.Context, u *User, s *Secret) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, u, s)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretStorageMockRecorder) CreateSecret(ctx, u, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretStorage)(nil).CreateSecret), ctx, u, s)
}

// DeleteSecret mocks base method.
func (m *MockSecretStorage) DeleteSecret(ctx context.Context, u *User, secretKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, u, secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretStorageMockRecorder) DeleteSecret(ctx, u, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretStorage)(nil).DeleteSecret), ctx, u, secretKey)
}

// GetSecret mocks base method.
func (m *MockSecretStorage) GetSecret(ctx context.Context, u *User, secretKey string) (*Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, u, secretKey)
	ret0, _ := ret[0].(*Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretStorageMockRecorder) GetSecret(ctx, u, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretStorage)(nil).GetSecret), ctx, u, secretKey)
}

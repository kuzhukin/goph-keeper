// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package transport is a generated GoMock package.
package transport

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/kuzhukin/goph-keeper/internal/client/storage"
	handler "github.com/kuzhukin/goph-keeper/internal/server/handler"
)

// MockBinaryDataClient is a mock of BinaryDataClient interface.
type MockBinaryDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryDataClientMockRecorder
}

// MockBinaryDataClientMockRecorder is the mock recorder for MockBinaryDataClient.
type MockBinaryDataClientMockRecorder struct {
	mock *MockBinaryDataClient
}

// NewMockBinaryDataClient creates a new mock instance.
func NewMockBinaryDataClient(ctrl *gomock.Controller) *MockBinaryDataClient {
	mock := &MockBinaryDataClient{ctrl: ctrl}
	mock.recorder = &MockBinaryDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryDataClient) EXPECT() *MockBinaryDataClientMockRecorder {
	return m.recorder
}

// DeleteBinaryData mocks base method.
func (m *MockBinaryDataClient) DeleteBinaryData(ctx context.Context, u *storage.User, dataKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinaryData", ctx, u, dataKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBinaryData indicates an expected call of DeleteBinaryData.
func (mr *MockBinaryDataClientMockRecorder) DeleteBinaryData(ctx, u, dataKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinaryData", reflect.TypeOf((*MockBinaryDataClient)(nil).DeleteBinaryData), ctx, u, dataKey)
}

// DownloadBinaryData mocks base method.
func (m *MockBinaryDataClient) DownloadBinaryData(ctx context.Context, u *storage.User, dataKey string) (*storage.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBinaryData", ctx, u, dataKey)
	ret0, _ := ret[0].(*storage.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadBinaryData indicates an expected call of DownloadBinaryData.
func (mr *MockBinaryDataClientMockRecorder) DownloadBinaryData(ctx, u, dataKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBinaryData", reflect.TypeOf((*MockBinaryDataClient)(nil).DownloadBinaryData), ctx, u, dataKey)
}

// UpdateBinaryData mocks base method.
func (m *MockBinaryDataClient) UpdateBinaryData(ctx context.Context, u *storage.User, r *storage.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBinaryData", ctx, u, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBinaryData indicates an expected call of UpdateBinaryData.
func (mr *MockBinaryDataClientMockRecorder) UpdateBinaryData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBinaryData", reflect.TypeOf((*MockBinaryDataClient)(nil).UpdateBinaryData), ctx, u, r)
}

// UploadBinaryData mocks base method.
func (m *MockBinaryDataClient) UploadBinaryData(ctx context.Context, u *storage.User, r *storage.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBinaryData", ctx, u, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBinaryData indicates an expected call of UploadBinaryData.
func (mr *MockBinaryDataClientMockRecorder) UploadBinaryData(ctx, u, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBinaryData", reflect.TypeOf((*MockBinaryDataClient)(nil).UploadBinaryData), ctx, u, r)
}

// MockRegisterClient is a mock of RegisterClient interface.
type MockRegisterClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterClientMockRecorder
}

// MockRegisterClientMockRecorder is the mock recorder for MockRegisterClient.
type MockRegisterClientMockRecorder struct {
	mock *MockRegisterClient
}

// NewMockRegisterClient creates a new mock instance.
func NewMockRegisterClient(ctrl *gomock.Controller) *MockRegisterClient {
	mock := &MockRegisterClient{ctrl: ctrl}
	mock.recorder = &MockRegisterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterClient) EXPECT() *MockRegisterClientMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockRegisterClient) RegisterUser(ctx context.Context, login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockRegisterClientMockRecorder) RegisterUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockRegisterClient)(nil).RegisterUser), ctx, login, password)
}

// MockSecretDataClient is a mock of SecretDataClient interface.
type MockSecretDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockSecretDataClientMockRecorder
}

// MockSecretDataClientMockRecorder is the mock recorder for MockSecretDataClient.
type MockSecretDataClientMockRecorder struct {
	mock *MockSecretDataClient
}

// NewMockSecretDataClient creates a new mock instance.
func NewMockSecretDataClient(ctrl *gomock.Controller) *MockSecretDataClient {
	mock := &MockSecretDataClient{ctrl: ctrl}
	mock.recorder = &MockSecretDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretDataClient) EXPECT() *MockSecretDataClientMockRecorder {
	return m.recorder
}

// CreateSecret mocks base method.
func (m *MockSecretDataClient) CreateSecret(ctx context.Context, userToken, secretName, secretData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", ctx, userToken, secretName, secretData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretDataClientMockRecorder) CreateSecret(ctx, userToken, secretName, secretData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretDataClient)(nil).CreateSecret), ctx, userToken, secretName, secretData)
}

// DeleteSecret mocks base method.
func (m *MockSecretDataClient) DeleteSecret(ctx context.Context, userToken, secretKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, userToken, secretKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretDataClientMockRecorder) DeleteSecret(ctx, userToken, secretKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretDataClient)(nil).DeleteSecret), ctx, userToken, secretKey)
}

// GetSecret mocks base method.
func (m *MockSecretDataClient) GetSecret(ctx context.Context, userToken, secretName string) (*storage.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, userToken, secretName)
	ret0, _ := ret[0].(*storage.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretDataClientMockRecorder) GetSecret(ctx, userToken, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretDataClient)(nil).GetSecret), ctx, userToken, secretName)
}

// MockWalletClient is a mock of WalletClient interface.
type MockWalletClient struct {
	ctrl     *gomock.Controller
	recorder *MockWalletClientMockRecorder
}

// MockWalletClientMockRecorder is the mock recorder for MockWalletClient.
type MockWalletClientMockRecorder struct {
	mock *MockWalletClient
}

// NewMockWalletClient creates a new mock instance.
func NewMockWalletClient(ctrl *gomock.Controller) *MockWalletClient {
	mock := &MockWalletClient{ctrl: ctrl}
	mock.recorder = &MockWalletClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletClient) EXPECT() *MockWalletClientMockRecorder {
	return m.recorder
}

// CreateCardData mocks base method.
func (m *MockWalletClient) CreateCardData(ctx context.Context, userToken, cardNumber, cardData string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCardData", ctx, userToken, cardNumber, cardData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCardData indicates an expected call of CreateCardData.
func (mr *MockWalletClientMockRecorder) CreateCardData(ctx, userToken, cardNumber, cardData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCardData", reflect.TypeOf((*MockWalletClient)(nil).CreateCardData), ctx, userToken, cardNumber, cardData)
}

// DeleteCardData mocks base method.
func (m *MockWalletClient) DeleteCardData(ctx context.Context, userToken, cardNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardData", ctx, userToken, cardNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCardData indicates an expected call of DeleteCardData.
func (mr *MockWalletClientMockRecorder) DeleteCardData(ctx, userToken, cardNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardData", reflect.TypeOf((*MockWalletClient)(nil).DeleteCardData), ctx, userToken, cardNumber)
}

// ListCardData mocks base method.
func (m *MockWalletClient) ListCardData(ctx context.Context, userToken string) ([]*handler.CardData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCardData", ctx, userToken)
	ret0, _ := ret[0].([]*handler.CardData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCardData indicates an expected call of ListCardData.
func (mr *MockWalletClientMockRecorder) ListCardData(ctx, userToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCardData", reflect.TypeOf((*MockWalletClient)(nil).ListCardData), ctx, userToken)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package middleware is a generated GoMock package.
package middleware

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserChecker is a mock of UserChecker interface.
type MockUserChecker struct {
	ctrl     *gomock.Controller
	recorder *MockUserCheckerMockRecorder
}

// MockUserCheckerMockRecorder is the mock recorder for MockUserChecker.
type MockUserCheckerMockRecorder struct {
	mock *MockUserChecker
}

// NewMockUserChecker creates a new mock instance.
func NewMockUserChecker(ctrl *gomock.Controller) *MockUserChecker {
	mock := &MockUserChecker{ctrl: ctrl}
	mock.recorder = &MockUserCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserChecker) EXPECT() *MockUserCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUserChecker) Check(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockUserCheckerMockRecorder) Check(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockUserChecker)(nil).Check), ctx, token)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: auth_test.go

// Package middleware is a generated GoMock package.
package middleware

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPHandler is a mock of HTTPHandler interface.
type MockHTTPHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPHandlerMockRecorder
}

// MockHTTPHandlerMockRecorder is the mock recorder for MockHTTPHandler.
type MockHTTPHandlerMockRecorder struct {
	mock *MockHTTPHandler
}

// NewMockHTTPHandler creates a new mock instance.
func NewMockHTTPHandler(ctrl *gomock.Controller) *MockHTTPHandler {
	mock := &MockHTTPHandler{ctrl: ctrl}
	mock.recorder = &MockHTTPHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPHandler) EXPECT() *MockHTTPHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockHTTPHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", w, r)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockHTTPHandlerMockRecorder) ServeHTTP(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHTTPHandler)(nil).ServeHTTP), w, r)
}

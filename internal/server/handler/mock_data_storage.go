// Code generated by MockGen. DO NOT EDIT.
// Source: data_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataStorage is a mock of DataStorage interface.
type MockDataStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDataStorageMockRecorder
}

// MockDataStorageMockRecorder is the mock recorder for MockDataStorage.
type MockDataStorageMockRecorder struct {
	mock *MockDataStorage
}

// NewMockDataStorage creates a new mock instance.
func NewMockDataStorage(ctrl *gomock.Controller) *MockDataStorage {
	mock := &MockDataStorage{ctrl: ctrl}
	mock.recorder = &MockDataStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStorage) EXPECT() *MockDataStorageMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockDataStorage) CreateData(ctx context.Context, userToken string, r *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, userToken, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockDataStorageMockRecorder) CreateData(ctx, userToken, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockDataStorage)(nil).CreateData), ctx, userToken, r)
}

// DeleteData mocks base method.
func (m *MockDataStorage) DeleteData(ctx context.Context, userToken string, r *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, userToken, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockDataStorageMockRecorder) DeleteData(ctx, userToken, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockDataStorage)(nil).DeleteData), ctx, userToken, r)
}

// ListData mocks base method.
func (m *MockDataStorage) ListData(ctx context.Context, userToken string) ([]*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListData", ctx, userToken)
	ret0, _ := ret[0].([]*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListData indicates an expected call of ListData.
func (mr *MockDataStorageMockRecorder) ListData(ctx, userToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListData", reflect.TypeOf((*MockDataStorage)(nil).ListData), ctx, userToken)
}

// LoadData mocks base method.
func (m *MockDataStorage) LoadData(ctx context.Context, userToken, name string) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadData", ctx, userToken, name)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadData indicates an expected call of LoadData.
func (mr *MockDataStorageMockRecorder) LoadData(ctx, userToken, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadData", reflect.TypeOf((*MockDataStorage)(nil).LoadData), ctx, userToken, name)
}

// UpdateData mocks base method.
func (m *MockDataStorage) UpdateData(ctx context.Context, userToken string, r *Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, userToken, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockDataStorageMockRecorder) UpdateData(ctx, userToken, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockDataStorage)(nil).UpdateData), ctx, userToken, r)
}

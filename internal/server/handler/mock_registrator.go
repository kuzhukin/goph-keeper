// Code generated by MockGen. DO NOT EDIT.
// Source: register_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrator is a mock of Registrator interface.
type MockRegistrator struct {
	ctrl     *gomock.Controller
	recorder *MockRegistratorMockRecorder
}

// MockRegistratorMockRecorder is the mock recorder for MockRegistrator.
type MockRegistratorMockRecorder struct {
	mock *MockRegistrator
}

// NewMockRegistrator creates a new mock instance.
func NewMockRegistrator(ctrl *gomock.Controller) *MockRegistrator {
	mock := &MockRegistrator{ctrl: ctrl}
	mock.recorder = &MockRegistratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrator) EXPECT() *MockRegistratorMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegistrator) Register(ctx context.Context, user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRegistratorMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistrator)(nil).Register), ctx, user)
}
